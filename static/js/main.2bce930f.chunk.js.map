{"version":3,"sources":["components/common/Responsive.js","lib/styles/palette.js","components/common/Button.js","components/common/Header.js","lib/api/client.js","lib/api/auth.js","modules/loading.js","lib/createRequestSaga.js","modules/user.js","components/common/SubInfo.js","components/common/Tags.js","components/posts/PostList.js","modules/posts.js","lib/api/posts.js","containers/posts/PostsListContainer.js","components/posts/Pagination.js","containers/posts/PaginationContainer.js","components/auth/AuthTemplate.js","modules/auth.js","components/auth/AuthForm.js","containers/auth/LoginForm.js","containers/auth/RegisterForm.js","components/write/Editor.js","modules/write.js","components/write/TagBox.js","components/write/WriteActionButtons.js","containers/write/WriteActionButtonsContainer.js","modules/post.js","components/post/PostViewer.js","components/common/AskModal.js","components/post/AskRemoveModal.js","components/post/PostActionButtons.js","App.js","containers/post/PostViewerContainer.js","serviceWorker.js","modules/index.js","index.js"],"names":["ResponsiveBlock","styled","div","Responsive","children","rest","palette","gray","cyan","buttonStyle","css","props","fullWidth","StyledButton","button","StyledLink","Link","Button","to","client","axios","create","logout","post","startLoading","createAction","requestType","finishLoading","loading","handleActions","state","action","payload","createRequestActionTypes","type","createRequestSaga","request","SUCCESS","FAILURE","put","call","response","data","meta","error","logoutSaga","userSaga","CHECK","CHECK_SUCCESS","CHECK_FAILURE","tempSetUser","user","check","checkSaga","get","checkFailureSaga","localStorage","removeItem","e","console","log","authAPI","takeLatest","checkError","SubInfoBlock","hasMarginTop","SubInfo","username","publishedDate","Date","toLocaleDateString","TagsBlock","Tags","tags","map","tag","className","key","PostListBlock","WritePostButtonWrapper","PostItemBlock","PostItem","title","body","_id","PostList","posts","showWriteButton","postsSaga","LIST_POSTS","LIST_POSTS_SUCCESS","LIST_POSTS_FAILURE","listPosts","page","listPostsSaga","queryString","qs","stringify","lastPage","parseInt","headers","paylaod","withRouter","location","match","dispatch","useDispatch","useSelector","useEffect","params","parse","search","ignoreQueryPrefix","PaginationBlock","PageNumber","buildLink","query","Pagination","disabled","undefined","authSaga","REGISTER","REGISETR_SUCCESS","REGISTER_FAILURE","LOGIN","LOGIN_SUCCESS","LOGIN_FAILURE","changeField","form","value","initializeForm","register","password","login","registerSaga","loginSaga","initialState","passwordConfirm","auth","authError","produce","draft","AuthFormBlock","StyledInput","input","Footer","ButtonWithMarginTop","textMap","ErrorMessage","AuthForm","onChange","onSubmit","text","autoComplete","name","placeholder","history","useState","setError","push","setItem","JSON","target","preventDefault","status","includes","writeSaga","WRITE_POST","WRITE_POST_SUCCESS","WRITE_POST_FAILURE","UPDATE_POST","UPDATE_POST_SUCCESS","UPDATE_POST_FAILURE","setOriginalPost","writePost","updatePost","id","writePostSaga","updatePostSaga","patch","postError","originalPostId","write","Tag","TagListBlock","TagItem","React","memo","onRemove","onClick","WriteActionButtonsBlock","WriteActionButtons","onCancel","onPublish","isEdit","oncancel","goBack","postSaga","READ_POST","READ_POST_SUCCESS","READ_POST_FAILURE","readPost","unloadPost","readPostSaga","PostViewerBlock","PostHead","PostContent","PostViewer","actionButtons","dangerouslySetInnerHTML","__html","Fullscreen","AskModalBlock","AskModal","visible","description","confirmText","cancelText","onConfirm","AskRemoveModal","PostActionButtonsBlock","ActionButton","PostActionButtons","onEdit","modal","setModal","App","postId","a","delete","ownPost","Boolean","window","hostname","rootSaga","all","rootReducer","combineReducers","sagaMiddleware","createSagaMiddleware","store","createStore","composeWithDevTools","applyMiddleware","run","getItem","loadUser","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.2bce930f.chunk.js","sourcesContent":["import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst ResponsiveBlock = styled.div`\r\n  padding-left: 1rem;\r\n  padding-right: 1rem;\r\n  width: 1024px;\r\n  margin: 0 auto; /*중앙정렬*/\r\n\r\n  /*브라우저 크기에 따라 가로 크기 변경*/\r\n  @media (max-width: 1024px) {\r\n    width: 768px;\r\n  }\r\n  @media (max-width: 768px) {\r\n    width: 100 @;\r\n  }\r\n`;\r\n\r\nconst Responsive = ({ children, ...rest }) => {\r\n  //style, className, onClick, onMouseMove 등의 props를 사용할 수 있도록\r\n  // ...rest를 사용하여 ResponsiveBlock에게 전달\r\n  return <ResponsiveBlock {...rest}>{children}</ResponsiveBlock>;\r\n};\r\n\r\nexport default Responsive;\r\n","// source: https://yeun.github.io/open-color/\r\n\r\nconst palette = {\r\n  gray: [\r\n    '#f8f9fa',\r\n    '#f1f3f5',\r\n    '#e9ecef',\r\n    '#dee2e6',\r\n    '#ced4da',\r\n    '#adb5bd',\r\n    '#868e96',\r\n    '#495057',\r\n    '#343a40',\r\n    '#212529',\r\n  ],\r\n  cyan: [\r\n    '#e3fafc',\r\n    '#c5f6fa',\r\n    '#99e9f2',\r\n    '#66d9e8',\r\n    '#3bc9db',\r\n    '#22b8cf',\r\n    '#15aabf',\r\n    '#1098ad',\r\n    '#0c8599',\r\n    '#0b7285',\r\n  ],\r\n};\r\n\r\nexport default palette;\r\n","import React from 'react';\r\nimport styled, { css } from 'styled-components';\r\nimport { Link } from 'react-router-dom';\r\nimport palette from '../../lib/styles/palette';\r\n\r\nconst buttonStyle = css`\r\n  border: none;\r\n  border-radius: 4px;\r\n  font-size: 1rem;\r\n  font-weight: bold;\r\n  padding: 0.25rem 1rem;\r\n  color: white;\r\n  outline: none;\r\n  cursor: pointer;\r\n\r\n  background: ${palette.gray[8]};\r\n  &:hover {\r\n    background: ${palette.gray[6]};\r\n  }\r\n  ${(props) =>\r\n    props.fullWidth &&\r\n    css`\r\n      padding-top: 0.75rem;\r\n      padding-bottom: 0.75rem;\r\n      width: 100%;\r\n      font-size: 1.125rem;\r\n    `}\r\n\r\n  ${(props) =>\r\n    props.cyan &&\r\n    css`\r\n      background: ${palette.cyan[5]};\r\n      &:hover {\r\n        background: ${palette.cyan[4]};\r\n      }\r\n    `}\r\n    &:disabled {\r\n    background: ${palette.gray[3]};\r\n    color: ${palette.gray[5]};\r\n    cursor: not-allowed;\r\n  }\r\n`;\r\n\r\nconst StyledButton = styled.button`\r\n  ${buttonStyle}\r\n`;\r\n\r\nconst StyledLink = styled(Link)`\r\n  ${buttonStyle}\r\n`;\r\n\r\nconst Button = (props) => {\r\n  return props.to ? (\r\n    <StyledLink {...props} cyan={props.cyan ? 1 : 0} />\r\n  ) : (\r\n    <StyledButton {...props} />\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport Responsive from './Responsive';\r\nimport Button from './Button';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst HeaderBlock = styled.div`\r\n  position: fixed;\r\n  width: 100%;\r\n  background: white;\r\n  box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.08);\r\n`;\r\n/**\r\n *  Responsive 컴포넌트의 속성에 스타일을 추가해서 새로운 컴포넌트 생성\r\n */\r\n\r\nconst Wrapper = styled(Responsive)`\r\n  height: 4rem;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between; /*자식 엘리먼트 사이의 여백을 최대로 설정 */\r\n  .logo {\r\n    font-size: 1.125rem;\r\n    font-weight: 800;\r\n    letter-spacing: 2px;\r\n  }\r\n  .right {\r\n    display: flex;\r\n    align-items: center;\r\n  }\r\n`;\r\n\r\n/**\r\n * 헤더가 fixed로 되어 있기 때문에 페이지의 콘텐츠가 4rem 아래에 나타나도록 해주는 컴포넌트\r\n */\r\nconst Spacer = styled.div`\r\n  height: 4rem;\r\n`;\r\n\r\nconst UserInfo = styled.div`\r\n  font-weight: 800;\r\n  margin-right: 1rem;\r\n`;\r\n\r\nconst Header = ({ user, onLogout }) => {\r\n  return (\r\n    <>\r\n      <HeaderBlock>\r\n        <Wrapper>\r\n          <Link to=\"/\" className=\"logo\">\r\n            REACTERS\r\n          </Link>\r\n          {user ? (\r\n            <div className=\"right\">\r\n              <UserInfo>{user.username}</UserInfo>\r\n              <Button onClick={onLogout}>로그아웃</Button>\r\n            </div>\r\n          ) : (\r\n            <div className=\"right\">\r\n              <Button to=\"/login\">로그인</Button>\r\n            </div>\r\n          )}\r\n        </Wrapper>\r\n      </HeaderBlock>\r\n      <Spacer />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import axios from 'axios';\r\n\r\nconst client = axios.create();\r\n/*글로벌 설정 예시:\r\n// API주소를 다른 고승로 사용함\r\nclient.defaults.baseURL = 'https://external-api-server.com'\r\n\r\n//헤더 설정\r\nclient.defaults.headers.common['Authorization'] = 'Bearer a1b2c3d3';\r\n\r\n//인터셉터 설정\r\naxios.intercepter.response.use(\\\r\n    response => {\r\n        //요청 성공시 특정 작업 수행\r\n        return response;\r\n    },\r\n    error => {\r\n        //요청 실패시 특정 작업 수행\r\n        return Promise.reject(error);\r\n    })\r\n*/\r\nexport default client;\r\n","import client from './client';\r\n\r\n//회원 인증에 피요한 API를 사용하기 쉽도록 함수화하여 파일로 작성\r\n//로그인\r\nexport const login = ({ username, password }) =>\r\n  client.post('/api/auth/login', { username, password });\r\n\r\n//회원가입\r\nexport const register = ({ username, password }) =>\r\n  client.post('/api/auth/register', { username, password });\r\n\r\n//로그인 상태 확인\r\nexport const check = () => client.get('/api/auth/check');\r\n\r\nexport const logout = () => client.post('/api/auth/logout');\r\n","import { createAction, handleActions } from 'redux-actions';\r\n\r\nconst START_LOADING = 'loading/START_LAODING';\r\nconst FINISH_LOADING = 'loading/FINISH_LOADING';\r\n\r\n/*\r\n요청을 위한 액션 타입을 payload로 설정한다. (예: \"sample/GET_POST\")\r\n*/\r\n\r\nexport const startLoading = createAction(\r\n  START_LOADING,\r\n  (requestType) => requestType,\r\n);\r\n\r\nexport const finishLoading = createAction(\r\n  FINISH_LOADING,\r\n  (requestType) => requestType,\r\n);\r\n\r\nconst initialState = {};\r\n\r\nconst loading = handleActions(\r\n  {\r\n    [START_LOADING]: (state, action) => ({\r\n      ...state,\r\n      [action.payload]: true,\r\n    }),\r\n    [FINISH_LOADING]: (state, action) => ({\r\n      ...state,\r\n      [action.payload]: false,\r\n    }),\r\n  },\r\n  initialState,\r\n);\r\n\r\nexport default loading;\r\n","import { call, put } from 'redux-saga/effects';\r\nimport { startLoading, finishLoading } from '../modules/loading';\r\n\r\nexport const createRequestActionTypes = (type) => {\r\n  const SUCCESS = `${type}_SUCCESS`;\r\n  const FAILURE = `${type}_FAILURE`;\r\n  return [type, SUCCESS, FAILURE];\r\n};\r\n\r\nexport default function createRequestSaga(type, request) {\r\n  const SUCCESS = `${type}_SUCCESS`;\r\n  const FAILURE = `${type}_FAILURE`;\r\n\r\n  return function* (action) {\r\n    yield put(startLoading(type)); //로딩시작\r\n    try {\r\n      const response = yield call(request, action.payload);\r\n      yield put({\r\n        type: SUCCESS,\r\n        payload: response.data,\r\n        meta: response,\r\n      });\r\n    } catch (e) {\r\n      yield put({\r\n        type: FAILURE,\r\n        payload: e,\r\n        error: true,\r\n      });\r\n    }\r\n    yield put(finishLoading(type)); // 로딩 끝\r\n  };\r\n}\r\n","import { createAction, handleActions } from 'redux-actions';\r\nimport { takeLatest, call } from 'redux-saga/effects';\r\nimport * as authAPI from '../lib/api/auth';\r\nimport createRequestSaga, {\r\n  createRequestActionTypes,\r\n} from '../lib/createRequestSaga';\r\n\r\nconst TEMP_SET_USER = 'user/TEMP_SET_USER'; //새로고침 이후 임시 로그인 처리\r\n//회원 정보 확인\r\nconst [CHECK, CHECK_SUCCESS, CHECK_FAILURE] = createRequestActionTypes(\r\n  'user/CHECK',\r\n);\r\n\r\nconst LOGOUT = 'user/LOGOUT';\r\n\r\nexport const tempSetUser = createAction(TEMP_SET_USER, (user) => user);\r\nexport const check = createAction(CHECK);\r\nexport const logout = createAction(LOGOUT);\r\n\r\nconst checkSaga = createRequestSaga(CHECK, authAPI.check);\r\n\r\nfunction checkFailureSaga() {\r\n  try {\r\n    localStorage.removeItem('user'); //localStorage에서 user를 제거\r\n  } catch (e) {\r\n    console.log('localStorage is not working');\r\n  }\r\n}\r\n\r\nfunction* logoutSaga() {\r\n  try {\r\n    yield call(authAPI.logout); //logout API호출\r\n    localStorage.removeItem('user'); //localStorage에서 user를 제거\r\n  } catch (e) {\r\n    console.log(e);\r\n  }\r\n}\r\n\r\nexport function* userSaga() {\r\n  yield takeLatest(CHECK, checkSaga);\r\n  yield takeLatest(CHECK_FAILURE, checkFailureSaga);\r\n  yield takeLatest(LOGOUT, logoutSaga);\r\n}\r\n\r\nconst initialState = {\r\n  user: null,\r\n  checkError: null,\r\n};\r\n\r\nexport default handleActions(\r\n  {\r\n    [TEMP_SET_USER]: (state, { payload: user }) => ({\r\n      ...state,\r\n      user,\r\n    }),\r\n    [CHECK_SUCCESS]: (state, { payload: user }) => ({\r\n      ...state,\r\n      user,\r\n      checkError: null,\r\n    }),\r\n    [CHECK_FAILURE]: (state, { payload: error }) => ({\r\n      ...state,\r\n      user: null,\r\n      checkError: error,\r\n    }),\r\n    [LOGOUT]: (state) => ({\r\n      ...state,\r\n      user: null,\r\n    }),\r\n  },\r\n  initialState,\r\n);\r\n","import React from 'react';\r\nimport styled, { css } from 'styled-components';\r\nimport { Link } from 'react-router-dom';\r\nimport palette from '../../lib/styles/palette';\r\n\r\nconst SubInfoBlock = styled.div`\r\n  ${(props) =>\r\n    props.hasMarginTop &&\r\n    css`\r\n      margin-top: 1rem;\r\n    `}\r\n  /*margin-top: 1rem;*/\r\n  color: ${palette.gray[6]};\r\n\r\n  /*span 사이에 가운뎃점 문자 보여주기 */\r\n  span+span: before {\r\n    color: ${palette.gray[4]};\r\n    padding-left: 0.25rem;\r\n    padding-rigth: 0.25rem;\r\n    content: '\\\\B7'; /*가운뎃점 문자 */\r\n  }\r\n`;\r\n\r\nconst SubInfo = ({ username, publishedDate, hasMarginTop }) => {\r\n  return (\r\n    <SubInfoBlock hasMarginTop={hasMarginTop}>\r\n      <span>\r\n        <b>\r\n          <Link to={`/@${username}`}>{username}</Link>\r\n        </b>\r\n      </span>\r\n      <span>{new Date(publishedDate).toLocaleDateString()}</span>\r\n    </SubInfoBlock>\r\n  );\r\n};\r\n\r\nexport default SubInfo;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport palette from '../../lib/styles/palette';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst TagsBlock = styled.div`\r\n  margin-top: 0.5rem;\r\n  .tag {\r\n    display: inline-block;\r\n    color: ${palette.cyan[7]};\r\n    text-decoration: none;\r\n    margin-right: 0.5rem;\r\n    &:hover {\r\n      color: ${palette.cyan[6]};\r\n    }\r\n  }\r\n`;\r\n\r\nconst Tags = ({ tags }) => {\r\n  return (\r\n    <TagsBlock>\r\n      {tags.map((tag) => (\r\n        <Link className=\"tag\" to={`/?tag=${tag}`} key={tag}>\r\n          #{tag}\r\n        </Link>\r\n      ))}\r\n    </TagsBlock>\r\n  );\r\n};\r\nexport default Tags;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { Link } from 'react-router-dom';\r\nimport Responsive from '../common/Responsive';\r\nimport Button from '../common/Button';\r\nimport palette from '../../lib/styles/palette';\r\nimport SubInfo from '../common/SubInfo';\r\nimport Tags from '../common/Tags';\r\n\r\nconst PostListBlock = styled(Responsive)`\r\n  margin-top: 3rem;\r\n`;\r\n\r\nconst WritePostButtonWrapper = styled.div`\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  margin-bottom: 3rem;\r\n`;\r\n\r\nconst PostItemBlock = styled.div`\r\n  padding-top: 3rem;\r\n  padding-bottom: 3rem;\r\n  /*맨위 포스트는 padding-top없음 */\r\n  *:first-child {\r\n    padding-top: 0;\r\n  }\r\n  & + & {\r\n    border-top: 1px solid ${palette.gray[2]};\r\n  }\r\n\r\n  h2 {\r\n    font-size: 2rem;\r\n    margin-bottom: 0;\r\n    margin-top: 0;\r\n    &:hover {\r\n      color: ${palette.gray[6]};\r\n    }\r\n  }\r\n  p {\r\n    margin-top: 2rem;\r\n  }\r\n`;\r\n\r\n// // const SubInfo = styled.div`\r\n// //   /*margin-top: 1rem;*/\r\n// //   color: ${palette.gray[6]};\r\n\r\n// //   /*span 사이에 가운뎃점 문자 보여주기 */\r\n// //   span+span: before {\r\n// //     color: ${palette.gray[4]};\r\n// //     padding-left: 0.25rem;\r\n// //     padding-rigth: 0.25rem;\r\n// //     content: '\\\\B7'; /*가운뎃점 문자 */\r\n// //   }\r\n// `;\r\n// const Tags = styled.div`\r\n//   margin-top: 0.5rem;\r\n//   .tag {\r\n//     display: inline-block;\r\n//     color: ${palette.cyan[7]};\r\n//     text-decoration: none;\r\n//     margin-right: 0.5rem;\r\n//     &:hover {\r\n//       color: ${palette.cyan[6]};\r\n//     }\r\n//   }\r\n// `;\r\n\r\nconst PostItem = ({ post }) => {\r\n  const { publishedDate, user, tags, title, body, _id } = post;\r\n  return (\r\n    <PostItemBlock>\r\n      <h2>\r\n        <Link to={`/@${user.username}/${_id}`}>{title}</Link>\r\n      </h2>\r\n      <SubInfo\r\n        username={user.username}\r\n        publishedDate={new Date(publishedDate)}\r\n      />\r\n      <Tags tags={tags} />\r\n      <p>{body}</p>\r\n    </PostItemBlock>\r\n  );\r\n};\r\n\r\nconst PostList = ({ posts, loading, error, showWriteButton }) => {\r\n  //에러 발생 시\r\n  if (error) {\r\n    return <PostListBlock>에러가 발생했습니다.</PostListBlock>;\r\n  }\r\n  return (\r\n    <PostListBlock>\r\n      <WritePostButtonWrapper>\r\n        {showWriteButton && (\r\n          <Button cyan to=\"/write\">\r\n            새 글 작성하기\r\n          </Button>\r\n        )}\r\n      </WritePostButtonWrapper>\r\n      {/*로딩중이 아니고, 퐇스트 배열이 존재할 때만 보여줌 */}\r\n      {!loading && posts && (\r\n        <div>\r\n          {posts.map((post) => (\r\n            <PostItem post={post} key={post._id} />\r\n          ))}\r\n        </div>\r\n      )}\r\n    </PostListBlock>\r\n  );\r\n};\r\n\r\nexport default PostList;\r\n","import { createAction, handleActions } from 'redux-actions';\r\nimport createRequestSaga, {\r\n  createRequestActionTypes,\r\n} from '../lib/createRequestSaga';\r\nimport * as postsAPI from '../lib/api/posts';\r\nimport { takeLatest } from 'redux-saga/effects';\r\n\r\nconst [\r\n  LIST_POSTS,\r\n  LIST_POSTS_SUCCESS,\r\n  LIST_POSTS_FAILURE,\r\n] = createRequestActionTypes('post/LIST_POSTs');\r\n\r\nexport const listPosts = createAction(\r\n  LIST_POSTS,\r\n  ({ tag, username, page }) => ({ tag, username, page }),\r\n);\r\n\r\nconst listPostsSaga = createRequestSaga(LIST_POSTS, postsAPI.listPosts);\r\nexport function* postsSaga() {\r\n  yield takeLatest(LIST_POSTS, listPostsSaga);\r\n}\r\n\r\nconst initialState = {\r\n  posts: null,\r\n  error: null,\r\n  lastPage: 1,\r\n};\r\n\r\nconst posts = handleActions(\r\n  {\r\n    [LIST_POSTS_SUCCESS]: (state, { payload: posts, meta: response }) => ({\r\n      ...state,\r\n      posts,\r\n      lastPage: parseInt(response.headers['last-page'], 10), //문자열을 숫자로 변환\r\n    }),\r\n    [LIST_POSTS_FAILURE]: (state, { paylaod: error }) => ({\r\n      ...state,\r\n      error,\r\n    }),\r\n  },\r\n  initialState,\r\n);\r\nexport default posts;\r\n","import qs from 'qs';\r\nimport client from './client';\r\n\r\nexport const writePost = ({ title, body, tags }) =>\r\n  client.post('/api/posts', { title, body, tags });\r\n\r\nexport const readPost = (id) => client.get(`/api/posts/${id}`);\r\n\r\nexport const listPosts = ({ page, username, tag }) => {\r\n  const queryString = qs.stringify({\r\n    page,\r\n    username,\r\n    tag,\r\n  });\r\n  return client.get(`/api/posts?${queryString}`);\r\n};\r\n\r\nexport const updatePost = ({ id, title, body, tags }) =>\r\n  client.patch(`/api/posts/${id}`, {\r\n    title,\r\n    body,\r\n    tags,\r\n  });\r\n\r\nexport const removePost = (id) => client.delete(`/api/posts/${id}`);\r\n","import React, { useEffect } from 'react';\r\nimport qs from 'qs';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport PostList from '../../components/posts/PostList';\r\nimport { listPosts } from '../../modules/posts';\r\n\r\nconst PostListContainer = ({ location, match }) => {\r\n  const dispatch = useDispatch();\r\n  const { posts, error, loading, user } = useSelector(\r\n    ({ posts, loading, user }) => ({\r\n      posts: posts.posts,\r\n      error: posts.error,\r\n      loading: loading['posts/LIST_POSTS'],\r\n      user: user.user,\r\n    }),\r\n  );\r\n\r\n  useEffect(() => {\r\n    const { username } = match.params;\r\n    const { tag, page } = qs.parse(location.search, {\r\n      ignoreQueryPrefix: true,\r\n    });\r\n    dispatch(listPosts({ tag, username, page }));\r\n  }, [dispatch, location.search]);\r\n\r\n  return (\r\n    <PostList\r\n      loading={loading}\r\n      error={error}\r\n      posts={posts}\r\n      showWriteButton={user}\r\n    />\r\n  );\r\n};\r\nexport default withRouter(PostListContainer);\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport qs from 'qs';\r\nimport Button from '../common/Button';\r\n\r\nconst PaginationBlock = styled.div`\r\n  width: 320px;\r\n  margin: 0 auto;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  margin-bottom: 3rem;\r\n`;\r\nconst PageNumber = styled.div``;\r\n\r\nconst buildLink = ({ username, tag, page }) => {\r\n  const query = qs.stringify({ tag, page });\r\n  return username ? `/@${username}?${query}` : `/?${query}`;\r\n};\r\n\r\nconst Pagination = ({ page, lastPage, username, tag }) => {\r\n  return (\r\n    <PaginationBlock>\r\n      <Button\r\n        disabled={page === 1}\r\n        to={\r\n          page === 1 ? undefined : buildLink({ username, tag, page: page - 1 })\r\n        }\r\n      >\r\n        이전\r\n      </Button>\r\n      <PageNumber>{page}</PageNumber>\r\n      <Button\r\n        disabled={page === lastPage}\r\n        to={\r\n          page === lastPage\r\n            ? undefined\r\n            : buildLink({ username, tag, page: page + 1 })\r\n        }\r\n      >\r\n        다음\r\n      </Button>\r\n    </PaginationBlock>\r\n  );\r\n};\r\n\r\nexport default Pagination;\r\n","import React from 'react';\r\nimport Pagination from '../../components/posts/Pagination';\r\nimport { useSelector } from 'react-redux';\r\nimport { withRouter } from 'react-router-dom';\r\nimport qs from 'qs';\r\n\r\nconst PaginationContainer = ({ location, match }) => {\r\n  const { lastPage, posts, loading } = useSelector(({ posts, loading }) => ({\r\n    lastPage: posts.lastPage,\r\n    posts: posts.posts,\r\n    loading: loading['posts/LIST_POSTS'],\r\n  }));\r\n\r\n  //포스트 데이터가 없거나 로딩 중이면 아무것도 보여주지 않음\r\n  if (!posts || loading) return null;\r\n  const { username } = match.params;\r\n\r\n  //page가 없으면 1을 기본값으로 사용\r\n  const { tag, page = 1 } = qs.parse(location.search, {\r\n    ignoreQueryPrefix: true,\r\n  });\r\n\r\n  return (\r\n    <Pagination\r\n      tag={tag}\r\n      username={username}\r\n      page={parseInt(page, 10)}\r\n      lastPage={lastPage}\r\n    />\r\n  );\r\n};\r\n\r\nexport default withRouter(PaginationContainer);\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport palette from '../../lib/styles/palette';\r\nimport { Link } from 'react-router-dom';\r\n\r\n/**\r\n * 회원가입 로그인 페이지의 레이아웃을 담당하는 컴포넌트\r\n */\r\n/*화면 전체를 체움 */\r\nconst AuthTemplateBlock = styled.div`\r\n  position: absolute;\r\n  left: 0;\r\n  top: 0;\r\n  bottom: 0;\r\n  right: 0;\r\n  background: ${palette.gray[2]};\r\n  /* flex로 내부 내용 중앙 정렬 */\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\n/*흰색 박스 */\r\nconst WhiteBox = styled.div`\r\n  .logo-area {\r\n    display: block;\r\n    padding-bottom: 2rem;\r\n    text-align: center;\r\n    font-weight: bold;\r\n    letter-spacing: 2px;\r\n  }\r\n  box-shadow: 0 0 8px rgba(0, 0, 0, 0.025);\r\n  padding: 2rem;\r\n  width: 360px;\r\n  background: white;\r\n  border-radius: 2px;\r\n`;\r\n\r\nconst AuthTemplate = ({ children }) => {\r\n  return (\r\n    <AuthTemplateBlock>\r\n      <WhiteBox>\r\n        <div className=\"logo-area\">\r\n          <Link to=\"/\">REACTERS</Link>\r\n        </div>\r\n        {children}\r\n      </WhiteBox>\r\n    </AuthTemplateBlock>\r\n  );\r\n};\r\n\r\nexport default AuthTemplate;\r\n","import { createAction, handleActions } from 'redux-actions';\r\nimport produce from 'immer';\r\nimport { takeLatest } from 'redux-saga/effects';\r\nimport createRequestSaga, {\r\n  createRequestActionTypes,\r\n} from '../lib/createRequestSaga';\r\nimport * as authAPI from '../lib/api/auth';\r\n\r\nconst CHANGE_FIELD = 'auth/CHANGE_FIELD';\r\nconst INITIALIZE_FORM = 'auth/INITIALIZE_FORM';\r\n\r\nconst [REGISTER, REGISETR_SUCCESS, REGISTER_FAILURE] = createRequestActionTypes(\r\n  'auth/REGISTER',\r\n);\r\n\r\nconst [LOGIN, LOGIN_SUCCESS, LOGIN_FAILURE] = createRequestActionTypes(\r\n  'auth/LOGIN',\r\n);\r\n\r\nexport const changeField = createAction(\r\n  CHANGE_FIELD,\r\n  ({ form, key, value }) => ({\r\n    form, //register, login\r\n    key, //username, password, passwordConfirm\r\n    value, //실제 바꾸려는 값\r\n  }),\r\n);\r\nexport const initializeForm = createAction(INITIALIZE_FORM, (form) => form); //register / login\r\n\r\nexport const register = createAction(REGISTER, ({ username, password }) => ({\r\n  username,\r\n  password,\r\n}));\r\nexport const login = createAction(LOGIN, ({ username, password }) => ({\r\n  username,\r\n  password,\r\n}));\r\n\r\n//사가 생성\r\nconst registerSaga = createRequestSaga(REGISTER, authAPI.register);\r\nconst loginSaga = createRequestSaga(LOGIN, authAPI.login);\r\nexport function* authSaga() {\r\n  yield takeLatest(REGISTER, registerSaga);\r\n  yield takeLatest(LOGIN, loginSaga);\r\n}\r\n\r\nconst initialState = {\r\n  register: {\r\n    username: '',\r\n    password: '',\r\n    passwordConfirm: '',\r\n  },\r\n  login: {\r\n    username: '',\r\n    password: '',\r\n  },\r\n  auth: null,\r\n  authError: null,\r\n};\r\n\r\nconst auth = handleActions(\r\n  {\r\n    [CHANGE_FIELD]: (state, { payload: { form, key, value } }) =>\r\n      produce(state, (draft) => {\r\n        draft[form][key] = value; //예: stae.register.username을 바꾼다.\r\n      }),\r\n    [INITIALIZE_FORM]: (state, { payload: form }) => ({\r\n      ...state,\r\n      [form]: initialState[form],\r\n      authError: null, //폼 전환시 회원 인증 에러 초기화\r\n    }),\r\n    //회원가입 성공\r\n    [REGISETR_SUCCESS]: (state, { payload: auth }) => ({\r\n      ...state,\r\n      authError: null,\r\n      auth,\r\n    }),\r\n    //회원가입 실패\r\n    [REGISTER_FAILURE]: (state, { payload: error }) => ({\r\n      ...state,\r\n      authError: error,\r\n    }),\r\n    //로그인 성공\r\n    [LOGIN_SUCCESS]: (state, { payload: auth }) => ({\r\n      ...state,\r\n      authError: null,\r\n      auth,\r\n    }),\r\n    //로그인 실패\r\n    [LOGIN_FAILURE]: (state, { payload: error }) => ({\r\n      ...state,\r\n      authError: error,\r\n    }),\r\n  },\r\n  initialState,\r\n);\r\n\r\nexport default auth;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { Link } from 'react-router-dom';\r\nimport palette from '../../lib/styles/palette';\r\nimport Button from '../common/Button';\r\n/**\r\n *회원 가입 또는 로그인 폼을 보여준다.\r\n */\r\n\r\nconst AuthFormBlock = styled.div`\r\n  h3 {\r\n    margin: 0;\r\n    color: ${palette.gray[8]};\r\n    margin-bottom: 1rem;\r\n  }\r\n`;\r\n\r\n/**\r\n * 스타일링된 input\r\n */\r\nconst StyledInput = styled.input`\r\n  font-size: 1rem;\r\n  border: none;\r\n  border-bottom: 1px solid ${palette.gray[5]};\r\n  padding-bottom: 0.5rem;\r\n  outline: none;\r\n  width: 100%;\r\n  &:focus {\r\n    color: $oc-teal-7;\r\n    border-bottom: 1px solid ${palette.gray[7]};\r\n  }\r\n  & + & {\r\n    margin-top: 1rem;\r\n  }\r\n`;\r\n\r\n/**\r\n * 폼 하단에 로그인 혹은 회원가입 링크를 보여줌\r\n */\r\nconst Footer = styled.div`\r\n  margin-top: 2rem;\r\n  text-align: right;\r\n  a {\r\n    color: ${palette.gray[6]};\r\n    text-decoration: underline;\r\n    &:hover {\r\n      color: ${palette.gray[9]};\r\n    }\r\n  }\r\n`;\r\n\r\nconst ButtonWithMarginTop = styled(Button)`\r\n  margin-top: 1rem;\r\n`;\r\n\r\nconst textMap = {\r\n  login: '로그인',\r\n  register: '회원가입',\r\n};\r\n\r\n/**\r\n *\r\n * 에러를 보여준다.\r\n */\r\nconst ErrorMessage = styled.div`\r\n  color: red;\r\n  text-align: center;\r\n  font-size: 0.875rem;\r\n  margin-top: 1rem;\r\n`;\r\n\r\nconst AuthForm = ({ type, form, onChange, onSubmit, error }) => {\r\n  const text = textMap[type];\r\n  return (\r\n    <AuthFormBlock>\r\n      <h3>{text}</h3>\r\n      <form onSubmit={onSubmit}>\r\n        <StyledInput\r\n          autoComplete=\"username\"\r\n          name=\"username\"\r\n          placeholder=\"아이디\"\r\n          onChange={onChange}\r\n          value={form.username}\r\n        />\r\n        <StyledInput\r\n          autoComplete=\"new-password\"\r\n          name=\"password\"\r\n          placeholder=\"비밀번호\"\r\n          type=\"password\"\r\n          onChange={onChange}\r\n          value={form.password}\r\n        />\r\n        {type === 'register' && (\r\n          <StyledInput\r\n            autoComplete=\"new-password\"\r\n            name=\"passwordConfirm\"\r\n            placeholder=\"비밀번호 확인\"\r\n            type=\"password\"\r\n            onChange={onChange}\r\n            value={form.passwordConfirm}\r\n          />\r\n        )}\r\n        {error && <ErrorMessage>{error}</ErrorMessage>}\r\n        <ButtonWithMarginTop cyan fullWidth>\r\n          {text}\r\n        </ButtonWithMarginTop>\r\n      </form>\r\n      <Footer>\r\n        {type === 'login' ? (\r\n          <Link to=\"/register\">회원가입</Link>\r\n        ) : (\r\n          <Link to=\"/login\">로그인</Link>\r\n        )}\r\n      </Footer>\r\n    </AuthFormBlock>\r\n  );\r\n};\r\n\r\nexport default AuthForm;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { changeField, initializeForm, login } from '../../modules/auth';\r\nimport AuthForm from '../../components/auth/AuthForm';\r\nimport { check } from '../../modules/user';\r\n\r\nconst LoginForm = ({ history }) => {\r\n  const [error, setError] = useState(null);\r\n  const dispatch = useDispatch();\r\n  const { form, auth, authError, user } = useSelector(({ auth, user }) => ({\r\n    form: auth.login,\r\n    auth: auth.auth,\r\n    authError: auth.authError,\r\n    user: user.user,\r\n  }));\r\n  //인풋 변경 이벤트 핸들러\r\n  const onChange = (e) => {\r\n    const { value, name } = e.target;\r\n    dispatch(\r\n      changeField({\r\n        form: 'login',\r\n        key: name,\r\n        value,\r\n      }),\r\n    );\r\n  };\r\n\r\n  //폼 등록 이벤트 핸들러\r\n  const onSubmit = (e) => {\r\n    e.preventDefault();\r\n    const { username, password } = form;\r\n    dispatch(login({ username, password }));\r\n  };\r\n\r\n  //컴포넌트가 처음 렌더링될 때 form을 초기화함\r\n  useEffect(() => {\r\n    dispatch(initializeForm('login'));\r\n  }, [dispatch]);\r\n\r\n  useEffect(() => {\r\n    if (authError) {\r\n      console.log('오류발생');\r\n      console.log(authError);\r\n      setError('로그인 실패');\r\n      return;\r\n    }\r\n    if (auth) {\r\n      console.log('로그인 성공');\r\n      dispatch(check());\r\n    }\r\n  }, [auth, authError, dispatch]);\r\n\r\n  useEffect(() => {\r\n    if (user) {\r\n      history.push('/');\r\n      try {\r\n        localStorage.setItem('user', JSON.stringify(user));\r\n      } catch (e) {\r\n        console.log('localStorage is not working');\r\n      }\r\n    }\r\n  }, [history, user]);\r\n\r\n  return (\r\n    <AuthForm\r\n      type=\"login\"\r\n      form={form}\r\n      onChange={onChange}\r\n      onSubmit={onSubmit}\r\n      error={error}\r\n    />\r\n  );\r\n};\r\n\r\nexport default withRouter(LoginForm);\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { changeField, initializeForm, register } from '../../modules/auth';\r\nimport AuthForm from '../../components/auth/AuthForm';\r\nimport { check } from '../../modules/user';\r\nimport { withRouter } from 'react-router-dom';\r\n\r\nconst RegisterForm = ({ history }) => {\r\n  const [error, setError] = useState(null);\r\n  const dispatch = useDispatch();\r\n  const { form, auth, authError, user } = useSelector(({ auth, user }) => ({\r\n    form: auth.register,\r\n    auth: auth.auth,\r\n    authError: auth.authError,\r\n    user: user.user,\r\n  }));\r\n  //인풋 변경 이벤트 핸들러\r\n  const onChange = (e) => {\r\n    const { value, name } = e.target;\r\n    dispatch(\r\n      changeField({\r\n        form: 'register',\r\n        key: name,\r\n        value,\r\n      }),\r\n    );\r\n  };\r\n\r\n  //폼 등록 이벤트 핸들러\r\n  const onSubmit = (e) => {\r\n    e.preventDefault();\r\n    const { username, password, passwordConfirm } = form;\r\n    //하나라도 비어 있다면\r\n    if ([username, password, passwordConfirm].includes('')) {\r\n      setError('빈 칸을 모두 입력하세요');\r\n      return;\r\n    }\r\n    //비밀번호가 일치하지 않는다면\r\n    if (password !== passwordConfirm) {\r\n      setError('비밀번호가 일치하지 않습니다.');\r\n      dispatch(changeField({ form: 'register', key: 'password', value: '' }));\r\n      dispatch(\r\n        changeField({ form: 'register', key: 'passwordConfirm', value: '' }),\r\n      );\r\n      return;\r\n    }\r\n    dispatch(register({ username, password }));\r\n  };\r\n\r\n  //컴포넌트가 처음 렌더링될 때 form을 초기화함\r\n  useEffect(() => {\r\n    dispatch(initializeForm('register'));\r\n  }, [dispatch]);\r\n\r\n  //회원가입 성공/실패 처리\r\n  useEffect(() => {\r\n    if (authError) {\r\n      //계정명이 이미 존자할 때\r\n      if (authError.response.status === 409) {\r\n        setError('이미 존재하는 계정명입니다.');\r\n        return;\r\n      }\r\n      //기타 이유\r\n      setError('회원가입 실패');\r\n      return;\r\n    }\r\n    if (auth) {\r\n      console.log('회원가입 성공');\r\n      console.log(auth);\r\n      dispatch(check());\r\n    }\r\n  }, [auth, authError, dispatch]);\r\n\r\n  //user값이 잘 설정되어 있는지 확인\r\n  useEffect(() => {\r\n    if (user) {\r\n      history.push('/'); //홈화면으로 이동\r\n      try {\r\n        localStorage.setItem('user', JSON.stringify(user));\r\n      } catch (e) {\r\n        console.log('localStorage is not working');\r\n      }\r\n    }\r\n  }, [history, user]);\r\n  return (\r\n    <AuthForm\r\n      type=\"register\"\r\n      form={form}\r\n      onChange={onChange}\r\n      onSubmit={onSubmit}\r\n      error={error}\r\n    />\r\n  );\r\n};\r\n\r\nexport default withRouter(RegisterForm);\r\n","import React, { useRef, useEffect } from 'react';\r\nimport Quill from 'quill';\r\nimport 'quill/dist/quill.bubble.css';\r\nimport styled from 'styled-components';\r\nimport palette from '../../lib/styles/palette';\r\nimport Responsive from '../common/Responsive';\r\n\r\nconst EditorBlock = styled(Responsive)`\r\n  /*페이지 위아래 여백 지정 */\r\n  padding-top: 5rem;\r\n  padding-bottom: 5rem;\r\n`;\r\n\r\nconst TitleInput = styled.input`\r\n  font-size: 3rem;\r\n  outline: none;\r\n  padding-bottom: 0.5rem;\r\n  border: none;\r\n  border-bottom: 1px solid ${palette.gray[4]};\r\n  margin-bottom: 2rem;\r\n  width: 100%;\r\n`;\r\n\r\nconst QuillWrapper = styled.div`\r\n  /*최소 크기 지정 및 padding 제거 */\r\n  .ql-editor {\r\n    padding: 0;\r\n    min-height: 320px;\r\n    font-size: 1.125rem;\r\n    line-height: 1.5;\r\n  }\r\n  .ql-editor.ql-black::before {\r\n    left: 0px;\r\n  }\r\n`;\r\n\r\nconst Editor = ({ title, body, onChangeField }) => {\r\n  const quillElement = useRef(null); //Quill을 적용할 DivElementㄹㄹ 설정\r\n  const quillInstance = useRef(null); //Quill 인스턴스를 설정\r\n\r\n  useEffect(() => {\r\n    quillInstance.current = new Quill(quillElement.current, {\r\n      theme: 'bubble',\r\n      placeholder: '내용을 작성하세요...',\r\n      modules: {\r\n        //더 많은 옵션\r\n        //https://quilljs.com/docs/modules/toolbar/\r\n        toolbar: [\r\n          [{ header: '1' }, { header: '2' }],\r\n          ['bold', 'italic', 'underline', 'strike'],\r\n          [{ list: 'ordered' }, { list: 'bullet' }],\r\n          ['blockquote', 'code-block', 'link', 'image'],\r\n        ],\r\n      },\r\n    });\r\n\r\n    //quill에 text-change 이벤트 핸들러 등록\r\n    //참고: https://quilljs.com/docs/api/#events\r\n    const quill = quillInstance.current;\r\n    quill.on('text-change', (delta, oldDelta, source) => {\r\n      if (source === 'user') {\r\n        onChangeField({ key: 'body', value: quill.root.innerHTML });\r\n      }\r\n    });\r\n  }, [onChangeField]);\r\n\r\n  const mounted = useRef(false);\r\n  useEffect(() => {\r\n    if (mounted.current) return;\r\n    mounted.current = true;\r\n    quillInstance.current.root.innerHTML = body;\r\n  }, [body]);\r\n\r\n  const onChangeTitle = (e) => {\r\n    onChangeField({ key: 'title', value: e.target.value });\r\n  };\r\n  return (\r\n    <EditorBlock>\r\n      <TitleInput\r\n        placeholder=\"제목을 입력하세요\"\r\n        onChange={onChangeTitle}\r\n        value={title}\r\n      />\r\n      <QuillWrapper>\r\n        <div ref={quillElement} />\r\n      </QuillWrapper>\r\n    </EditorBlock>\r\n  );\r\n};\r\n\r\nexport default Editor;\r\n","import { createAction, handleActions } from 'redux-actions';\r\nimport createRequestSaga, {\r\n  createRequestActionTypes,\r\n} from '../lib/createRequestSaga';\r\nimport * as postsAPI from '../lib/api/posts';\r\nimport { takeLatest } from 'redux-saga/effects';\r\n\r\nconst INITIALIZE = 'write/INITIALIZE'; //모든 내용 초기화\r\nconst CHANGE_FIELD = 'write/CHANGE_FIELD'; //특정 key값 바꾸기\r\nconst SET_ORIGINAL_POST = 'write/SET_ORIGINAL_POST';\r\nconst [\r\n  WRITE_POST,\r\n  WRITE_POST_SUCCESS,\r\n  WRITE_POST_FAILURE,\r\n] = createRequestActionTypes('write/WRITE_POST'); //포스트 작성\r\nconst [\r\n  UPDATE_POST,\r\n  UPDATE_POST_SUCCESS,\r\n  UPDATE_POST_FAILURE,\r\n] = createRequestActionTypes('write/UPDATE_POST'); //포스트 수정\r\n\r\nexport const initialize = createAction(INITIALIZE);\r\nexport const changeField = createAction(CHANGE_FIELD, ({ key, value }) => ({\r\n  key,\r\n  value,\r\n}));\r\nexport const setOriginalPost = createAction(SET_ORIGINAL_POST, (post) => post);\r\nexport const writePost = createAction(WRITE_POST, ({ title, body, tags }) => ({\r\n  title,\r\n  body,\r\n  tags,\r\n}));\r\nexport const updatePost = createAction(\r\n  UPDATE_POST,\r\n  ({ id, title, body, tags }) => ({\r\n    id,\r\n    title,\r\n    body,\r\n    tags,\r\n  }),\r\n);\r\n\r\n//사가 생성\r\nconst writePostSaga = createRequestSaga(WRITE_POST, postsAPI.writePost);\r\nconst updatePostSaga = createRequestSaga(UPDATE_POST, postsAPI.updatePost);\r\n\r\nexport function* writeSaga() {\r\n  yield takeLatest(WRITE_POST, writePostSaga);\r\n  yield takeLatest(UPDATE_POST, updatePostSaga);\r\n}\r\n\r\nconst initialState = {\r\n  title: '',\r\n  body: '',\r\n  tags: [],\r\n  post: null,\r\n  postError: null,\r\n  originalPostId: null,\r\n};\r\n\r\nconst write = handleActions(\r\n  {\r\n    [INITIALIZE]: (state) => initialState, //initialState를 넣으면 초기 상태로 바뀜\r\n    [CHANGE_FIELD]: (state, { payload: { key, value } }) => ({\r\n      ...state,\r\n      [key]: value, //특정 key값을 업데이트\r\n    }),\r\n    [WRITE_POST]: (state) => ({\r\n      ...state,\r\n      //post와 postError를 초기화\r\n      post: null,\r\n      postError: null,\r\n    }),\r\n    //포스트 작성 성공\r\n    [WRITE_POST_SUCCESS]: (state, { payload: post }) => ({\r\n      ...state,\r\n      post,\r\n    }),\r\n    //포스트 작성 실패\r\n    [WRITE_POST_FAILURE]: (state, { payload: postError }) => ({\r\n      ...state,\r\n      postError,\r\n    }),\r\n    [SET_ORIGINAL_POST]: (state, { payload: post }) => ({\r\n      ...state,\r\n      title: post.title,\r\n      body: post.body,\r\n      tags: post.tags,\r\n      originalPostId: post._id,\r\n    }),\r\n    [UPDATE_POST_SUCCESS]: (state, { payload: post }) => ({\r\n      ...state,\r\n      post,\r\n    }),\r\n    [UPDATE_POST_FAILURE]: (state, { payload: postError }) => ({\r\n      ...state,\r\n      postError,\r\n    }),\r\n  },\r\n  initialState,\r\n);\r\n\r\nexport default write;\r\n","import React, { useState, useCallback, useEffect } from 'react';\r\nimport styled from 'styled-components';\r\nimport palette from '../../lib/styles/palette';\r\n\r\nconst TagBoxBlock = styled.div`\r\n  width: 100%;\r\n  border-top: 1px solid ${palette.gray[2]};\r\n  padding-top: 2rem;\r\n\r\n  h4 {\r\n    color: ${palette.gray[8]};\r\n    margin-top: 0;\r\n    margin-bottom: 0.5rem;\r\n  }\r\n`;\r\n\r\nconst TagForm = styled.form`\r\n  border-radius: 4px;\r\n  overflow: hidden;\r\n  display: flex;\r\n  width: 256px;\r\n  border: 1px solid ${palette.gray[9]}; /*스타일 초기화 */\r\n  input,\r\n  button {\r\n    outline: none;\r\n    border: none;\r\n    font-size: 1rem;\r\n  }\r\n\r\n  input {\r\n    padding: 0.5rem;\r\n    flex: 1;\r\n    min-width: 0;\r\n  }\r\n  button {\r\n    cursor: pointer;\r\n    padding-right: 1rem;\r\n    padding-left: 1rem;\r\n    border: none;\r\n    background: ${palette.gray[8]};\r\n    color: white;\r\n    font-weight: bold;\r\n    &:hover {\r\n      background: ${palette.gray[6]};\r\n    }\r\n  }\r\n`;\r\n\r\nconst Tag = styled.div`\r\n  margin-rigth: 0.5rem;\r\n  color: ${palette.gray[6]};\r\n  cursor: pointer;\r\n  &:hover {\r\n    opacity: 0.5;\r\n  }\r\n`;\r\n\r\nconst TagListBlock = styled.div`\r\n  display: flex;\r\n  margin-top: 0.5rem;\r\n`;\r\n\r\n//React.memo를 사용하여 tag값이 바뀔 때만 리렌더링되도록 처리\r\nconst TagItem = React.memo(({ tag, onRemove }) => (\r\n  <Tag onClick={() => onRemove(tag)}>#{tag}</Tag>\r\n));\r\n\r\n//React.memo를 사용하여 tags값이 바뀔때만 리렌더링되도록 처리\r\nconst TagList = React.memo(({ tags, onRemove }) => (\r\n  <TagListBlock>\r\n    {tags.map((tag) => (\r\n      <TagItem key={tag} tag={tag} onRemove={onRemove} />\r\n    ))}\r\n  </TagListBlock>\r\n));\r\n\r\nconst TagBox = ({ tags, onChangeTags }) => {\r\n  const [input, setInput] = useState('');\r\n  const [localTags, setLocalTags] = useState([]);\r\n\r\n  const insertTag = useCallback(\r\n    (tag) => {\r\n      if (!tag) return; //공백이라면 추가하지 않음\r\n      if (localTags.includes(tag)) return; //이미 존재한다면 추가하지 않음\r\n      const nextTags = [...localTags, tag];\r\n      setLocalTags(nextTags);\r\n      onChangeTags(nextTags);\r\n    },\r\n    [localTags, onChangeTags],\r\n  );\r\n\r\n  const onRemove = useCallback(\r\n    (tag) => {\r\n      const nextTags = localTags.filter((t) => t !== tag);\r\n      setLocalTags(nextTags);\r\n      onChangeTags(nextTags);\r\n    },\r\n    [localTags, onChangeTags],\r\n  );\r\n\r\n  const onChange = useCallback((e) => {\r\n    setInput(e.target.value);\r\n  }, []);\r\n\r\n  const onSubmit = useCallback(\r\n    (e) => {\r\n      e.preventDefault();\r\n      insertTag(input.trim()); //앞뒤 공백을 없앤 후 등록\r\n      setInput(''); //input초기화\r\n    },\r\n    [input, insertTag],\r\n  );\r\n\r\n  //tags 값이 바뀔 때\r\n  useEffect(() => {\r\n    setLocalTags(tags);\r\n  }, [tags]);\r\n\r\n  return (\r\n    <TagBoxBlock>\r\n      <h4>태그</h4>\r\n      <TagForm onSubmit={onSubmit}>\r\n        <input\r\n          placeholder=\"태그를 입력하세요\"\r\n          value={input}\r\n          onChange={onChange}\r\n        />\r\n        <button type=\"submit\">추가</button>\r\n      </TagForm>\r\n      <TagList tags={localTags} onRemove={onRemove} />\r\n    </TagBoxBlock>\r\n  );\r\n};\r\n\r\nexport default TagBox;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport Button from '../common/Button';\r\n\r\nconst WriteActionButtonsBlock = styled.div`\r\n  margin-top: 1rem;\r\n  margin-bottom: 3rem;\r\n  button + button {\r\n    margin-left: 0.5rem;\r\n  }\r\n`;\r\n\r\n/*TagBox에서 ㅅ용하는 버튼과 일치하는 높이로 설정한 후 서로 간의 여백 지정 */\r\nconst StyledButton = styled(Button)`\r\n  height: 2.125rem;\r\n  & + & {\r\n    margin-left: 0.5rem;\r\n  }\r\n`;\r\n\r\nconst WriteActionButtons = ({ onCancel, onPublish, isEdit }) => {\r\n  return (\r\n    <WriteActionButtonsBlock>\r\n      <StyledButton cyan onClick={onPublish}>\r\n        포스트 {isEdit ? '수정' : '등록'}\r\n      </StyledButton>\r\n      <StyledButton onClick={oncancel}>취소</StyledButton>\r\n    </WriteActionButtonsBlock>\r\n  );\r\n};\r\n\r\nexport default WriteActionButtons;\r\n","import React, { useEffect } from 'react';\r\nimport WriteActionButtons from '../../components/write/WriteActionButtons';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { writePost, updatePost } from '../../modules/write';\r\n\r\nconst WriteActionButtonsContainer = ({ history }) => {\r\n  const dispatch = useDispatch();\r\n  const { title, body, tags, post, postError, originalPostId } = useSelector(\r\n    ({ write }) => ({\r\n      title: write.title,\r\n      body: write.body,\r\n      tags: write.tags,\r\n      post: write.post,\r\n      postError: write.postError,\r\n      originalPostId: write.originalPostId,\r\n    }),\r\n  );\r\n\r\n  //포스트 등록\r\n  const onPublish = () => {\r\n    if (originalPostId) {\r\n      dispatch(updatePost({ title, body, tags, id: originalPostId }));\r\n      return;\r\n    }\r\n    dispatch(\r\n      writePost({\r\n        title,\r\n        body,\r\n        tags,\r\n      }),\r\n    );\r\n  };\r\n\r\n  //취소\r\n  const onCancel = () => {\r\n    history.goBack();\r\n  };\r\n\r\n  //성공 혹은 실패 시 할 작업\r\n  useEffect(() => {\r\n    if (post) {\r\n      const { _id, user } = post;\r\n      history.push(`/@${user.username}/${_id}`);\r\n    }\r\n    if (postError) {\r\n      console.log(postError);\r\n    }\r\n  }, [history, post, postError]);\r\n  return (\r\n    <WriteActionButtons\r\n      onPublish={onPublish}\r\n      onCancel={onCancel}\r\n      isEdit={!!originalPostId}\r\n    />\r\n  );\r\n};\r\n\r\nexport default withRouter(WriteActionButtonsContainer);\r\n","import { createAction, handleActions } from 'redux-actions';\r\nimport createRequestSaga, {\r\n  createRequestActionTypes,\r\n} from '../lib/createRequestSaga';\r\nimport * as postsAPI from '../lib/api/posts';\r\nimport { takeLatest } from 'redux-saga/effects';\r\n\r\nconst [\r\n  READ_POST,\r\n  READ_POST_SUCCESS,\r\n  READ_POST_FAILURE,\r\n] = createRequestActionTypes('post/READ_POST');\r\nconst UNLOAD_POST = 'post/UNLOAD_POST'; //포스트 페이지에서 벗어날 때 데이터 비우기\r\n\r\nexport const readPost = createAction(READ_POST, (id) => id);\r\nexport const unloadPost = createAction(UNLOAD_POST);\r\n\r\nconst readPostSaga = createRequestSaga(READ_POST, postsAPI.readPost);\r\nexport function* postSaga() {\r\n  yield takeLatest(READ_POST, readPostSaga);\r\n}\r\n\r\nconst initialState = {\r\n  post: null,\r\n  error: null,\r\n};\r\n\r\nconst post = handleActions(\r\n  {\r\n    [READ_POST_SUCCESS]: (state, { payload: post }) => ({\r\n      ...state,\r\n      post,\r\n    }),\r\n    [READ_POST_FAILURE]: (state, { payload: error }) => ({\r\n      ...state,\r\n      error,\r\n    }),\r\n    [UNLOAD_POST]: () => initialState,\r\n  },\r\n  initialState,\r\n);\r\n\r\nexport default post;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport palette from '../../lib/styles/palette';\r\nimport Responsive from '../common/Responsive';\r\nimport SubInfo from '../common/SubInfo';\r\nimport Tags from '../common/Tags';\r\nimport { Helmet } from 'react-helmet-async';\r\n\r\nconst PostViewerBlock = styled(Responsive)`\r\n  margin-top: 4rem;\r\n`;\r\n\r\nconst PostHead = styled.div`\r\n  border-bottom: 1px solid ${palette.gray[2]};\r\n  padding-bottom: 3rem;\r\n  margin-bottom: 3rem;\r\n  h1 {\r\n    font-size: 3rem;\r\n    line-height: 1.5;\r\n    margin: 0;\r\n  }\r\n`;\r\n\r\n// const SubInfo = styled.div`\r\n//   margin-top: 1rem;\r\n//   color: ${palette.gray[6]};\r\n\r\n//   /*span사이에 가운뎃점 문자 보여주기 */\r\n//   span+span: befor {\r\n//     color: ${palette.gray[5]};\r\n//     padding-left: 0.25rem;\r\n//     padding-right: 0.25rem;\r\n//     content: '\\\\B7'; /* 가운뎃점 문자 */\r\n//   }\r\n// `;\r\n\r\n// const Tags = styled.div`\r\n//   margin-top: 0.5rem;\r\n//   .tag {\r\n//     display: inline-block;\r\n//     color: ${palette.cyan[7]};\r\n//     text-decoration: none;\r\n//     margin-right: 0.5rem;\r\n//     &:hover {\r\n//       color: ${palette.cyan[6]};\r\n//     }\r\n//   }\r\n// `;\r\nconst PostContent = styled.div`\r\n  font-size: 1.31235rem;\r\n  color: ${palette.gray[8]};\r\n`;\r\n\r\nconst PostViewer = ({ post, error, loading, actionButtons }) => {\r\n  //에러 발생 시\r\n  if (error) {\r\n    if (error.response && error.response.status === 400) {\r\n      return <PostViewerBlock>존재하지 않는 포스트입니다.</PostViewerBlock>;\r\n    }\r\n    return <PostViewerBlock>오류 발생!</PostViewerBlock>;\r\n  }\r\n\r\n  //로딩중이거나 아직 포스트 데이터가 없을때\r\n  if (loading || !post) {\r\n    return null;\r\n  }\r\n  const { title, body, user, publishedDate, tags } = post;\r\n  return (\r\n    <PostViewerBlock>\r\n      <Helmet>\r\n        <title>{title} - REACTERS</title>\r\n      </Helmet>\r\n      <PostHead>\r\n        <h1>{title}</h1>\r\n        <SubInfo\r\n          username={user.username}\r\n          publishedDate={publishedDate}\r\n          hasMarginTop\r\n        />\r\n        <Tags tags={tags} />\r\n      </PostHead>\r\n      {actionButtons}\r\n      <PostContent dangerouslySetInnerHTML={{ __html: body }} />\r\n    </PostViewerBlock>\r\n  );\r\n};\r\n\r\nexport default PostViewer;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport Button from './Button';\r\n\r\nconst Fullscreen = styled.div`\r\n  position: fixed;\r\n  z-index: 30;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  background: rgba(0, 0, 0, 0.25);\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\nconst AskModalBlock = styled.div`\r\n  width: 320px;\r\n  background: white;\r\n  padding: 1.5rem;\r\n  border-radius: 4px;\r\n  box-shadow: 0px 0px 8px rgba(0, 0, 0, 0.125);\r\n  h2 {\r\n    margin-top: 0;\r\n    margin-bottom: 1rem;\r\n  }\r\n  p {\r\n    margin-bottom: 3rem;\r\n  }\r\n  .buttons {\r\n    display: flex;\r\n    justify-content: flex-end;\r\n  }\r\n`;\r\n\r\nconst StyledButton = styled(Button)`\r\n  height: 2rem;\r\n  & + & {\r\n    margin-left: 0.75rem;\r\n  }\r\n`;\r\n\r\nconst AskModal = ({\r\n  visible,\r\n  title,\r\n  description,\r\n  confirmText = '확인',\r\n  cancelText = '취소',\r\n  onConfirm,\r\n  onCancel,\r\n}) => {\r\n  if (!visible) return null;\r\n  return (\r\n    <Fullscreen>\r\n      <AskModalBlock>\r\n        <h2>{title}</h2>\r\n        <p>{description}</p>\r\n        <div className=\"buttons\">\r\n          <StyledButton onClick={onCancel}>{cancelText}</StyledButton>\r\n          <StyledButton cyan onClick={onConfirm}>\r\n            {confirmText}\r\n          </StyledButton>\r\n        </div>\r\n      </AskModalBlock>\r\n    </Fullscreen>\r\n  );\r\n};\r\n\r\nexport default AskModal;\r\n","import React from 'react';\r\nimport AskModal from '../common/AskModal';\r\n\r\nconst AskRemoveModal = ({ visible, onConfirm, onCancel }) => {\r\n  return (\r\n    <AskModal\r\n      visible={visible}\r\n      title=\"포스트 삭제\"\r\n      description=\"포스트를 정말 삭제하시겠습니까?\"\r\n      confirmText=\"삭제\"\r\n      onConfirm={onConfirm}\r\n      onCancel={onCancel}\r\n    />\r\n  );\r\n};\r\n\r\nexport default AskRemoveModal;\r\n","import React, { useState, useCallback } from 'react';\r\nimport styled from 'styled-components';\r\nimport palette from '../../lib/styles/palette';\r\nimport AskRemoveModal from './AskRemoveModal';\r\n\r\nconst PostActionButtonsBlock = styled.div`\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  margin-bottom: 2rem;\r\n  margin-top: -1.5rem;\r\n`;\r\n\r\nconst ActionButton = styled.button`\r\n  padding: 0.25rem 0.5rem;\r\n  border-radius: 4px;\r\n  color: ${palette.gray[6]};\r\n  font-weight: bold;\r\n  border: none;\r\n  outline: none;\r\n  font-size: 0.875rem;\r\n  cursor: pointer;\r\n  &:hover {\r\n    background: ${palette.gray[1]};\r\n    color: ${palette.cyan[7]};\r\n  }\r\n\r\n  & + & {\r\n    margin-left: 0.25rem;\r\n  }\r\n`;\r\n\r\nconst PostActionButtons = ({ onEdit, onRemove }) => {\r\n  const [modal, setModal] = useState(false);\r\n  const onRemoveClick = () => {\r\n    setModal(true);\r\n  };\r\n  const onCancel = () => {\r\n    setModal(false);\r\n  };\r\n  const onConfirm = () => {\r\n    setModal(false);\r\n    onRemove();\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <PostActionButtonsBlock>\r\n        <ActionButton onClick={onEdit}>수정</ActionButton>\r\n        <ActionButton onClick={onRemoveClick}>삭제</ActionButton>\r\n      </PostActionButtonsBlock>\r\n      <AskRemoveModal\r\n        visible={modal}\r\n        onConfirm={onConfirm}\r\n        onCancel={onCancel}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PostActionButtons;\r\n","import React from 'react';\nimport { Route } from 'react-router-dom';\nimport PostListPage from './pages/PostListPage';\nimport LoginPage from './pages/LoginPage';\nimport RegisterPage from './pages/RegisterPage';\nimport WritePage from './pages/WritePage';\nimport PostPage from './pages/PostPage';\nimport { Helmet } from 'react-helmet-async';\n\nconst App = () => {\n  return (\n    //PostLisPage처럼 path에 배열을 넣어주면 한 라우트컴포넌트에 여러개의 경로를 쉽게 설정할 수 있다.\n    <>\n      <Helmet>\n        <title>대현's 블로그</title>\n      </Helmet>\n      <Route component={PostListPage} path={['/@:username', '/']} exact />\n      <Route component={LoginPage} path=\"/login\" />\n      <Route component={RegisterPage} path=\"/register\" />\n      <Route component={WritePage} path=\"/write\" />\n      <Route component={PostPage} path=\"/@:username/:postId\" />\n    </>\n  );\n};\nexport default App;\n","import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { readPost, unloadPost } from '../../modules/post';\r\nimport PostViewer from '../../components/post/PostViewer';\r\nimport PostActionButtons from '../../components/post/PostActionButtons';\r\nimport { setOriginalPost } from '../../modules/write';\r\nimport { removePost } from '../../lib/api/posts';\r\n\r\nconst PostViewerContainer = ({ match, history }) => {\r\n  //처음마운트 될때 포스트 읽기 API요청\r\n  const { postId } = match.params;\r\n  const dispatch = useDispatch();\r\n  const { post, error, loading, user } = useSelector(\r\n    ({ post, loading, user }) => ({\r\n      post: post.post,\r\n      error: post.error,\r\n      loading: loading['post/READ_POST'],\r\n      user: user.user,\r\n    }),\r\n  );\r\n\r\n  useEffect(() => {\r\n    dispatch(readPost(postId));\r\n    //언마운트될 때 리덕스에서 포스트 데이터 없애기\r\n    return () => {\r\n      dispatch(unloadPost());\r\n    };\r\n  }, [dispatch, postId]);\r\n\r\n  const onEdit = () => {\r\n    dispatch(setOriginalPost(post));\r\n    history.push('/write');\r\n  };\r\n\r\n  const onRemove = async () => {\r\n    try {\r\n      await removePost(postId);\r\n      history.push('/'); //홈으로 이동\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  };\r\n\r\n  const ownPost = (user && user._id) === (post && post.user._id);\r\n\r\n  return (\r\n    <PostViewer\r\n      post={post}\r\n      loading={loading}\r\n      error={error}\r\n      actionButtons={\r\n        ownPost && <PostActionButtons onEdit={onEdit} onRemove={onRemove} />\r\n      }\r\n    />\r\n  );\r\n};\r\n\r\nexport default withRouter(PostViewerContainer);\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { combineReducers } from 'redux';\r\nimport { all } from 'redux-saga/effects';\r\nimport auth, { authSaga } from './auth';\r\nimport loading from './loading';\r\nimport user, { userSaga } from './user';\r\nimport write, { writeSaga } from './write';\r\nimport post, { postSaga } from './post';\r\nimport posts, { postsSaga } from './posts';\r\n\r\nconst rootReducer = combineReducers({\r\n  auth,\r\n  loading,\r\n  user,\r\n  write,\r\n  post,\r\n  posts,\r\n});\r\n\r\nexport function* rootSaga() {\r\n  yield all([authSaga(), userSaga(), writeSaga(), postSaga(), postsSaga()]);\r\n}\r\n\r\nexport default rootReducer;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport createSagaMiddleware from 'redux-saga';\nimport rootReducer, { rootSaga } from './modules';\nimport { tempSetUser, check } from './modules/user';\nimport { HelmetProvider } from 'react-helmet-async';\n\nconst sagaMiddleware = createSagaMiddleware();\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(sagaMiddleware)),\n);\n\nfunction loadUser() {\n  try {\n    const user = localStorage.getItem('user');\n    if (!user) return; //로그인 상태가 아니라면 아무것도 안함\n\n    store.dispatch(tempSetUser(user));\n    store.dispatch(check());\n  } catch (e) {\n    console.log('localStorage is not working');\n  }\n}\n\nsagaMiddleware.run(rootSaga);\nloadUser();\n\nReactDOM.render(\n  <Provider store={store}>\n    <BrowserRouter>\n      <HelmetProvider>\n        <App />\n      </HelmetProvider>\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}